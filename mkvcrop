#!/usr/bin/env python3
import sys
import os
import shutil
import csv
import subprocess
from datetime import datetime, timedelta
import logging
logging.basicConfig()
logger = logging.getLogger()
#logger.setLevel(logging.DEBUG)

# cd to directory if passed as argument
if len(sys.argv) > 1:
    os.chdir(sys.argv[1])

def process_item(config):
    if len(config) < 3:
        return

    rerun = False
    filename = config[0]
    basename = os.path.splitext(filename)[0]
    orgfile = filename
    startfile = "%s.start" % basename
    endfile = "%s.end" % basename

    startstr = config[1]
    endstr = config[2]

    # try with .start/.end files
    if not startstr and os.path.isfile(startfile):
        with open(startfile) as f: startstr = f.read().strip()
    if not endstr and os.path.isfile(endfile):
        with open(endfile) as f: endstr = f.read().strip()

    if not os.path.isfile(filename):
        logger.debug("skipping non-existent %s", filename)
        return

    oldfile = filename+"~"
    if os.path.isfile(oldfile):
        rerun = True
        filename = oldfile
        logger.debug("re-processing %s", filename)
    else:
        logger.debug("processing %s", filename)

    # get total duration of file in seconds
    durationstr=subprocess.check_output(['mediainfo', '--Output=General;%Duration%', filename], stderr=subprocess.STDOUT).strip()
    if not durationstr:
        logger.error("no medatadata found in %s", filename)
        return

    fileduration = timedelta(milliseconds=int(durationstr))
    logger.debug("input file duration: %s", fileduration)

    # get requested duration
    try:
        starttime = datetime.strptime(startstr, '%H:%M:%S')
    except ValueError:
        try:
            starttime = datetime.strptime(startstr, '%M:%S')
        except ValueError:
            logger.debug("skipping invalid date %s", startstr)
            return
    logger.debug("requested start time: %s", starttime)
    try:
        endtime = datetime.strptime(endstr, '%H:%M:%S')
    except ValueError:
        try:
            endtime = datetime.strptime(endstr, '%M:%S')
        except ValueError:
            logger.debug("skipping invalid date %s", endstr)
            return
    logger.debug("requested end time: %s", endtime)
    reqduration = endtime - starttime
    logger.debug("requested duration: %s", reqduration)

    if fileduration - reqduration < timedelta(seconds=30):
        logger.debug("file already cropped")
        return

    logger.info("cropping %s", filename)
    # os.rename has problems with utf8 filenames
#    os.rename(filename, oldfile)
    if not rerun:
        shutil.move(filename, oldfile)
    filename = orgfile
    try:
        subprocess.check_call(['nice', '-n', '20', 'ionice', '-c', '3', 'mkvmerge', '-o', filename, '--split', 'parts:%s-%s' % (startstr, endstr), oldfile], stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        logger.error("processing %s failed (%s)", filename, e)
        os.rename(oldfile, filename)
        return
    # copy mtime/atime from original file
    info = os.stat(oldfile)
    # this works but causes ownership problems when the files are on samba share
    # os.utime(filename, (info.st_atime, info.st_mtime))
    subprocess.check_call(['sudo', 'touch', '-d', str(datetime.fromtimestamp(info.st_mtime)), filename])


with open('.mkvcrop.csv', 'r') as f:
    for item in reversed(list(csv.reader(f, delimiter=';'))):
        process_item(item)
